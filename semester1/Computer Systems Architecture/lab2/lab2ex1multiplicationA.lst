     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 03                          a db 3
    14 00000001 02                          b db 2
    15 00000002 01                          c db 1
    16 00000003 0500                        d dw 5
    17 00000005 02                          doi db 2
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; a,b,c - byte, d - word    1.((a+b-c)*2 + d-5)*d
    22 00000000 A0[00000000]                    mov al,[a]
    23 00000005 0205[01000000]                  add al,[b]
    24 0000000B 2A05[02000000]                  sub al,[c]
    25 00000011 F625[05000000]                  mul byte[doi] ; in Ax: (a+b-c)*2
    26 00000017 668B1D[03000000]                mov bx,[d]
    27 0000001E 6601D8                          add ax,bx
    28 00000021 6683E805                        sub ax,5
    29 00000025 66F7E3                          mul bx ;dx:ax : ((a+b-c)*2 + d-5)*d
    30                                          
    31                                          
    32                                          
    33                                          
    34                                          ; exit(0)
    35 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
