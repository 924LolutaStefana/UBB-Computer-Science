     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 5777                        a dw 0111_0111_0101_0111b
    14 00000002 BE9B                         b dw 1001_1011_1011_1110b
    15 00000004 00000000                     c dd 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ;16.Given the byte A and the word B, compute the doubleword C as follows:
    21                                      ;the bits 0-7 of C have the value 1
    22                                      ;the bits 8-11 of C are the same as the bits 4-7 of A
    23                                      ;the bits 12-19 are the same as the bits 2-9 of B
    24                                      ;the bits 20-23 are the same as the bits 0-3 of A
    25                                      ;the bits 24-31 are the same as the high byte of B
    26                                      
    27 00000000 BB00000000                      mov ebx,0
    28 00000005 6681CBFF00                      or   bx, 0000_0000_1111_1111b 
    29                                          
    30 0000000A 66A1[00000000]                  mov  ax, [a] ; we isolate bits 4-7 of A
    31 00000010 6625F000                        and  ax, 0000_0000_1111_0000b
    32 00000014 B104                            mov  cl, 4
    33 00000016 66D3C0                          rol  ax, cl ; we rotate 4 positions to the left
    34 00000019 6609C3                          or   bx, ax ; the bits 8-11 of C are the same as the bits 4-7 of A
    35                                          
    36                                          
    37 0000001C B800000000                      mov eax,0
    38 00000021 66A1[02000000]                  mov  ax, [b] 
    39 00000027 6625FC03                        and  ax, 0000_0011_1111_1100b
    40 0000002B B10A                            mov  cl, 10
    41 0000002D D3C0                            rol  eax, cl ; we rotate 10 positions to the left
    42 0000002F 09C3                            or   ebx, eax ; the bits 12-19 of C are the same as the bits 2-9 of B
    43                                          
    44 00000031 B800000000                       mov eax,0
    45 00000036 66A1[00000000]                  mov  ax, [a] 
    46 0000003C 6683E00F                        and  ax, 0000_0000_0000_1111b
    47 00000040 B114                            mov  cl, 20
    48 00000042 D3C0                            rol  eax, cl ; we rotate 29 positions to theleft
    49 00000044 09C3                            or   ebx, eax ; the bits 20-23 are the same as the bits 0-3 of A
    50                                          
    51                                          ;8-15
    52                                          
    53 00000046 B800000000                       mov eax,0
    54 0000004B 66A1[02000000]                  mov  ax, [b] 
    55 00000051 662500FF                        and  ax, 1111_1111_0000_0000b
    56 00000055 B110                            mov  cl, 16
    57 00000057 D3C0                            rol  eax, cl ; we rotate 16 positions to the left
    58 00000059 09C3                            or   ebx, eax ;24-31 are the same as the high byte of B
    59                                          
    60 0000005B 891D[04000000]                  mov [c],ebx
    61                                          
    62                                   
    63                                          
    64 00000061 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000063 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
