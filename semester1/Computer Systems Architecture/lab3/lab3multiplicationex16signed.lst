     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0100                        a dw 1
    14 00000002 01                          b db 1
    15 00000003 0100                        c dw 1
    16 00000005 01                          d db 1
    17 00000006 03000000                    e dd 3
    18 0000000A 0300000000000000            x dq 3
    19                                      
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ;16.x/2+100*(a+b)-3/(c+d)+e*e; a,c-word; b,d-byte; e-doubleword; x-qword  unsigned
    25 00000000 A1[0A000000]                    mov eax, dword [x+0] 
    26 00000005 8B15[0E000000]          	    mov edx, dword [x+4] 
    27 0000000B BB02000000                      mov ebx,2
    28 00000010 F7FB                            idiv ebx; eax: x/2
    29 00000012 89C3                            mov ebx,eax  ;ebx=x/2
    30 00000014 668B0D[00000000]                mov cx,[a]
    31 0000001B 8A15[02000000]                  mov dl,[b]
    32 00000021 6698                            cbw
    33 00000023 6601D1                          add cx,dx ; cx:a+b
    34 00000026 66B86400                        mov ax,100
    35 0000002A 66F7E9                          imul cx; dx:ax= 100*(a+b)
    36 0000002D 6652                            push dx
    37 0000002F 6650                            push ax
    38 00000031 58                              pop eax ; eax=100*(a+b)
    39 00000032 01D8                            add eax,ebx; eax=x/2+ 100*(a+b)
    40 00000034 50                              push eax
    41 00000035 B803000000                      mov eax,3
    42 0000003A 50                              push eax
    43 0000003B 6658                            pop ax
    44 0000003D 665A                            pop dx ; dx:ax=3
    45 0000003F 8A1D[05000000]                  mov bl,[d]
    46 00000045 6698                            cbw
    47 00000047 66031D[03000000]                add bx,[c]; bx:c+d
    48 0000004E 66F7FB                          idiv bx; ax=3/(c+d)
    49 00000051 98                              cwde
    50 00000052 89C3                            mov ebx,eax; bx=3/(c+d)
    51 00000054 58                              pop eax
    52 00000055 29D8                            sub eax,ebx; eax=x/2+100*(a+b)-3/(c+d)
    53 00000057 89C3                            mov ebx,eax;ebx=x/2+100*(a+b)-3/(c+d)
    54 00000059 A1[06000000]                    mov eax,[e]
    55 0000005E F7E8                            imul eax; edx:eax=e*e
    56 00000060 99                              cdq
    57 00000061 F8                              clc
    58 00000062 01D8                            add eax, ebx  ; eax=  eax+ebx 
    59 00000064 11CA                            adc edx, ecx ; edx:eax=x/2+100*(a+b)-3/(c+d)+e*e
    60                                          
    61                                          
    62                                      
    63                                          ; exit(0)
    64 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
