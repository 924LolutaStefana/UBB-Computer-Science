     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 0200                        b dw 2
    15 00000003 07000000                    c dd 7
    16 00000007 0100000000000000            d dq 1
    17 0000000F <res 00000008>              r resq 1; result
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; a - byte, b - word, c - double word, d - qword - Unsigned representation      1.c-(a+d)+(b+d)
    23                                          
    24 00000000 A0[00000000]                    mov al,[a]; in this moment edx:eax = a
    25 00000005 B400                            mov AH,0 
    26 00000007 66BA0000                        mov DX,0  
    27 0000000B 6652                            push dx
    28 0000000D 6650                            push ax
    29 0000000F 58                              pop eax
    30 00000010 BA00000000                      mov EDX,0
    31 00000015 8B1D[07000000]                  mov ebx, dword [d+0] 
    32 0000001B 8B0D[0B000000]          	    mov ecx, dword [d+4] ; storing qword d ; ecx:ebx= d
    33 00000021 01D8                            add eax, ebx  ; eax=  eax+ebx 
    34 00000023 01CA                            add edx, ecx ; edx =  edx+ecx ; edx:eax= a+d
    35 00000025 89C3                            mov ebx,eax
    36 00000027 89D1                            mov ecx,edx; ecx:ebx= a+d
    37 00000029 A1[03000000]                    mov eax,[c]; edx:eax= c 
    38 0000002E BA00000000                      mov EDX,0
    39 00000033 29D8                            sub eax, ebx  ; eax=  eax+ebx 
    40 00000035 29CA                            sub edx, ecx ;edx =  edx+ecx; edx:eax=c-(a+d)
    41 00000037 52                              push edx
    42 00000038 50                              push eax ; pushing them on the stack for later
    43 00000039 668B1D[01000000]                mov bx,[b]; ecx:ebx=b
    44 00000040 66B90000                        mov CX,0  
    45 00000044 6651                            push cx
    46 00000046 6653                            push bx
    47 00000048 5B                              pop ebx
    48 00000049 B900000000                      mov ECX,0
    49 0000004E A1[07000000]                    mov eax, dword [d+0] 
    50 00000053 8B15[0B000000]          	    mov edx, dword [d+4]; storing qword d ; ecx:ebx= d
    51 00000059 01D8                            add eax, ebx  ; eax=  eax+ebx 
    52 0000005B 01CA                            add edx, ecx ; edx:eax= b+d
    53 0000005D 5B                              pop ebx
    54 0000005E 59                              pop ecx; ecx:ebx= c-(a+d)
    55 0000005F 01D8                            add eax, ebx  ; eax=  eax+ebx 
    56 00000061 01CA                            add edx, ecx; edx:eax=c-(a+d)+(b+d)
    57 00000063 A3[0F000000]                    mov dword [r+0], eax 
    58 00000068 8915[13000000]                  mov dword [r+4], edx ; r=edx:eax=c-(a+d)+(b+d)
    59                                          ; exit(0)
    60 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
