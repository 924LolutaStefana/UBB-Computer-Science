     1                                  bits 32 
     2                                  global  start 
     3                                  ;x/2+100*(a+b)-3/(c+d)+e*e; a,c-word; b,d-byte; e-doubleword; x-qword
     4                                  ;SIGNED
     5                                  extern  exit
     6                                  
     7                                  import  exit msvcrt.dll
     8                                          
     9                                  segment  data use32 class=data 
    10 00000000 2C01                    	a dw 300
    11 00000002 09                          b db 9
    12 00000003 9001                        c dw 400
    13 00000005 05                          d db 5
    14 00000006 F4010000                    e dd 500
    15 0000000A 2003000000000000            x dq 800
    16                                      
    17                                     
    18                                  segment  code use32 class=code ; code segment
    19                                  start: 
    20                                     
    21 00000000 A0[05000000]                mov al,[d]
    22 00000005 6698                        cbw
    23 00000007 660305[03000000]            add ax,[c]
    24 0000000E 6689C3                      mov bx,ax ; bx=d+c
    25 00000011 66B80300                    mov ax,3
    26 00000015 66BA0000                    mov dx,0
    27 00000019 66F7FB                      idiv bx; dx:ax=3/(d+c)
    28 0000001C 6652                        push dx
    29 0000001E 6650                        push ax
    30 00000020 59                          pop ecx; ecx=3/(d+c)
    31 00000021 B800000000                  mov eax,0
    32 00000026 BA00000000                  mov edx,0
    33 0000002B A0[02000000]                mov al,[b]
    34 00000030 6698                        cbw
    35 00000032 660305[00000000]            add ax,[a] ; ax=a+b 
    36 00000039 66BB6400                    mov bx,100
    37 0000003D 66F7EB                      imul bx ;dx:ax=100*(a+b)
    38 00000040 6652                        push dx
    39 00000042 6650                        push ax
    40 00000044 58                          pop eax; eax=100*(a+b)
    41 00000045 29C8                        sub eax,ecx  ;eax =100*(a+b)-3/(d+c)
    42 00000047 89C1                        mov ecx,eax ;ecx =100*(a+b)-3/(d+c)
    43 00000049 A1[0A000000]                mov eax,[x+0]
    44 0000004E 8B15[0E000000]              mov edx,[x+4]
    45 00000054 BB02000000                  mov ebx,2
    46 00000059 F7FB                        idiv ebx ; edx:eax =x/2
    47 0000005B BB00000000                  mov ebx,0
    48 00000060 11C8                        adc eax,ecx
    49 00000062 01DA                        add edx,ebx ; edx:eax=x/2+100*(a+b)-3/(d+c)
    50 00000064 52                          push edx
    51 00000065 50                          push eax
    52 00000066 A1[06000000]                mov eax,[e]
    53 0000006B F7E8                        imul eax; edx:eax=e*e
    54 0000006D 59                          pop ecx
    55 0000006E 5B                          pop ebx
    56 0000006F 01DA                        add edx,ebx
    57 00000071 01C8                        add eax,ecx ;edx:eax=x/2+100*(a+b)-3/(d+c) + e*e
    58                                      
    59                                    
    60                                      
    61                                      
    62                                      
    63                                      
    64                                      
    65                                      
    66                                      
    67                                     
    68                                      
    69                                      
    70                                     
    71                                      
    72 00000073 6A00                        push   dword 0 
    73 00000075 FF15[00000000]          	call   [exit] 
