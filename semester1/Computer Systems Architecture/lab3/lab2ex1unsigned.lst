     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 0200                        b dw 2
    15 00000003 07000000                    c dd 7
    16 00000007 0100000000000000            d dq 1
    17 0000000F <res 00000008>              r resq 1; result
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; a - byte, b - word, c - double word, d - qword - Unsigned representation      1.c-(a+d)+(b+d)
    23 00000000 BA00000000                      mov edx,0
    24 00000005 B800000000                      mov eax,0; clearing the memory for converting byte a to qword
    25 0000000A A0[00000000]                    mov al,[a]; in this moment edx:eax = a
    26 0000000F 8B1D[07000000]                  mov ebx, dword [d+0] 
    27 00000015 8B0D[0B000000]          	    mov ecx, dword [d+4] ; storing qword d ; ecx:ebx= d
    28                                          ;clc ; clear Carry Flag 
    29 0000001B 01D8                            add eax, ebx  ; eax=  eax+ebx 
    30 0000001D 01CA                            add edx, ecx ; edx =  edx+ecx + CF ; edx:eax= a+d
    31 0000001F 89C3                            mov ebx,eax
    32 00000021 89D1                            mov ecx,edx; edx:eax= a+d
    33 00000023 BA00000000                      mov edx,0
    34 00000028 A1[03000000]                    mov eax,[c]; edx:eax= c
    35                                          ;clc ; clear Carry Flag 
    36 0000002D 29D8                            sub eax, ebx  ; eax=  eax+ebx 
    37 0000002F 29CA                            sub edx, ecx ;edx =  edx+ecx + CF; edx:eax=c-(a+d)
    38 00000031 52                              push edx
    39 00000032 50                              push eax ; pushing them on the stack for later
    40 00000033 BB00000000                      mov ebx,0
    41 00000038 B900000000                      mov ecx,0
    42 0000003D 668B1D[01000000]                mov bx,[b]; ecx:ebx=b
    43 00000044 A1[07000000]                    mov eax, dword [d+0] 
    44 00000049 8B15[0B000000]          	    mov edx, dword [d+4]; storing qword d ; ecx:ebx= d
    45                                          ;clc ; clear Carry Flag 
    46 0000004F 01D8                            add eax, ebx  ; eax=  eax+ebx 
    47 00000051 01CA                            add edx, ecx ; edx:eax= b+d
    48 00000053 5B                              pop ebx
    49 00000054 59                              pop ecx; ecx:ebx= c-(a+d)
    50                                          ;clc ; clear Carry Flag 
    51 00000055 01D8                            add eax, ebx  ; eax=  eax+ebx 
    52 00000057 01CA                            add edx, ecx; edx:eax=c-(a+d)+(b+d)
    53 00000059 A3[0F000000]                    mov dword [r+0], eax 
    54 0000005E 8915[13000000]                  mov dword [r+4], edx ; r=edx:eax=c-(a+d)+(b+d)
    55                                          ; exit(0)
    56 00000064 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000066 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
