     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01020304                    s db 1,2,3,4 ; declare the string of bytes
    14                                  	l equ $-s ; compute the length of the string in l
    15 00000004 0000<rept>              	d times l-1 dw 0 ; reserve l bytes for the destination string and initialize it 
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; 1.Given a byte string S of length l, obtain the string D of length l-1 as D(i) = S(i) * S(i+1) (each element of D is the product of two consecutive elements of S).
    21                                      ;Example:
    22                                      ;S: 1, 2, 3, 4
    23                                      ;D: 2, 6, 12
    24 00000000 B903000000                      mov ecx, l-1 ; we put the length l in ECX in order to make the loop
    25 00000005 BE00000000                      mov esi, 0     
    26 0000000A E319                            jecxz Sfarsit      
    27                                          Repeta:
    28 0000000C 8A86[00000000]                      mov al, [s+esi]
    29 00000012 8A9E[01000000]                      mov bl, [s+esi+1] 
    30 00000018 F6E3                                mul bl          
    31 0000001A 66898436[04000000]                  mov [d+esi*2], ax   
    32 00000022 46                                  inc esi
    33 00000023 E2E7                            loop Repeta
    34                                          Sfarsit:;end of the program
    35                                          ; exit(0)
    36 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    37 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
