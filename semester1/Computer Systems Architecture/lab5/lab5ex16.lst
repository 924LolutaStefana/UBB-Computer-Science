     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 616263626566                s1 db  'a', 'b', 'c', 'b', 'e', 'f'
    14                                       l equ $-s1
    15 00000006 3132333435                  s2 db '1', '2', '3', '4', '5'
    16                                      ; compute the length of the string in l
    17 0000000B 00<rept>                	d times l db 0;
    18                                    
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;Two character strings S1 and S2 are given. Obtain the string D by concatenating the elements found on odd positions in S2 and the elements found on even positions in S1.
    23                                  ;Example:
    24                                  ;S1: 'a', 'b', 'c', 'b', 'e', 'f'
    25                                  ;S2: '1', '2', '3', '4', '5'
    26                                  ;D: '1', 'b', '3', 'b', '5', 'f'
    27 00000000 B800000000                      mov eax,0
    28 00000005 BB00000000                      mov ebx,0 
    29 0000000A B900000000                      mov ecx,0 
    30 0000000F BA00000000                      mov edx,0
    31 00000014 B906000000                      mov ecx, l ; we put the length l in ECX in order to make the loop
    32 00000019 BE00000000                      mov esi, 0     
    33 0000001E 66BA0100                        mov dx,1
    34 00000022 E32F                            jecxz Sfarsit      
    35                                          Repeta:
    36                                          
    37 00000024 6689D0                              mov ax,dx
    38 00000027 B302                                mov bl,2
    39 00000029 F6F3                                div bl
    40 0000002B 80FC00                              cmp ah,0
    41 0000002E 7402                                je poz_par
    42 00000030 EB0E                                jmp poz_impar
    43                                              poz_par:
    44 00000032 8A86[00000000]                          mov al, [s1+esi]
    45 00000038 8886[0B000000]                          mov [d+esi],al
    46 0000003E EB0C                                    jmp end_cond
    47                                              poz_impar:
    48 00000040 8A86[06000000]                          mov al, [s2+esi]
    49 00000046 8886[0B000000]                          mov [d+esi],al
    50                                                  
    51                                              end_cond:
    52 0000004C 46                                      inc esi
    53 0000004D 6683C201                                add dx,1
    54 00000051 E2D1                            loop Repeta
    55                                          Sfarsit:;end of the program
    56                                      
    57                                          ; exit(0)
    58 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
